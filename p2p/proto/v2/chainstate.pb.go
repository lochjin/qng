// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Qitmeer/qng/p2p/proto/v2/chainstate.proto

package qitmeer_p2p_v2

import (
	fmt "fmt"
	v1 "github.com/Qitmeer/qng/p2p/proto/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChainState struct {
	GenesisHash          *v1.Hash       `protobuf:"bytes,1,opt,name=genesisHash,proto3" json:"genesisHash,omitempty"`
	ProtocolVersion      uint32         `protobuf:"varint,2,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	Timestamp            uint64         `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Services             uint64         `protobuf:"varint,4,opt,name=services,proto3" json:"services,omitempty"`
	DisableRelayTx       bool           `protobuf:"varint,5,opt,name=disableRelayTx,proto3" json:"disableRelayTx,omitempty"`
	GraphState           *v1.GraphState `protobuf:"bytes,6,opt,name=graphState,proto3" json:"graphState,omitempty"`
	UserAgent            []byte         `protobuf:"bytes,7,opt,name=userAgent,proto3" json:"userAgent,omitempty" ssz-max:"256"`
	MeerState            *MeerState     `protobuf:"bytes,8,opt,name=meerState,proto3" json:"meerState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChainState) Reset()         { *m = ChainState{} }
func (m *ChainState) String() string { return proto.CompactTextString(m) }
func (*ChainState) ProtoMessage()    {}
func (*ChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b998796909d5c7de, []int{0}
}
func (m *ChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainState.Merge(m, src)
}
func (m *ChainState) XXX_Size() int {
	return m.Size()
}
func (m *ChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainState.DiscardUnknown(m)
}

var xxx_messageInfo_ChainState proto.InternalMessageInfo

func (m *ChainState) GetGenesisHash() *v1.Hash {
	if m != nil {
		return m.GenesisHash
	}
	return nil
}

func (m *ChainState) GetProtocolVersion() uint32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *ChainState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChainState) GetServices() uint64 {
	if m != nil {
		return m.Services
	}
	return 0
}

func (m *ChainState) GetDisableRelayTx() bool {
	if m != nil {
		return m.DisableRelayTx
	}
	return false
}

func (m *ChainState) GetGraphState() *v1.GraphState {
	if m != nil {
		return m.GraphState
	}
	return nil
}

func (m *ChainState) GetUserAgent() []byte {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *ChainState) GetMeerState() *MeerState {
	if m != nil {
		return m.MeerState
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainState)(nil), "qitmeer.p2p.v2.ChainState")
}

func init() {
	proto.RegisterFile("github.com/Qitmeer/qng/p2p/proto/v2/chainstate.proto", fileDescriptor_b998796909d5c7de)
}

var fileDescriptor_b998796909d5c7de = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0x23, 0x31,
	0x14, 0x85, 0xd7, 0xd9, 0x6c, 0x36, 0x71, 0x36, 0xd9, 0x5d, 0x6b, 0x8b, 0xd9, 0x11, 0x1a, 0x46,
	0x29, 0xd0, 0x34, 0xd8, 0x8a, 0x09, 0x41, 0x4a, 0x47, 0x28, 0xa0, 0xa1, 0xc0, 0x20, 0x7a, 0x67,
	0xb0, 0x66, 0x2c, 0x65, 0x7e, 0x32, 0x76, 0x46, 0x81, 0x27, 0xe1, 0x91, 0x28, 0x79, 0x02, 0x84,
	0xc2, 0x1b, 0x50, 0x50, 0xa3, 0xf1, 0x40, 0xfe, 0x1a, 0x52, 0xfa, 0xdc, 0xef, 0x9e, 0xe3, 0x73,
	0x61, 0x2f, 0x90, 0x3a, 0x9c, 0x8e, 0xb0, 0x9f, 0x44, 0xe4, 0x42, 0xea, 0x48, 0x88, 0x8c, 0x4c,
	0xe2, 0x80, 0xa4, 0x34, 0x25, 0x69, 0x96, 0xe8, 0x84, 0xe4, 0x94, 0xf8, 0x21, 0x97, 0xb1, 0xd2,
	0x5c, 0x0b, 0x6c, 0x34, 0xd4, 0x9e, 0x94, 0x28, 0x4e, 0x69, 0x8a, 0x73, 0x6a, 0xe3, 0xaf, 0x5d,
	0xba, 0x24, 0x48, 0x82, 0xa4, 0xdc, 0xb7, 0xbb, 0xdb, 0xf0, 0x91, 0x50, 0x8a, 0x07, 0x1f, 0x91,
	0x76, 0x6f, 0xab, 0x88, 0x8c, 0xa7, 0xe1, 0xca, 0x47, 0xb7, 0x09, 0xa2, 0xa4, 0x50, 0x45, 0x1e,
	0x95, 0x2b, 0x9d, 0xb7, 0x0a, 0x84, 0x27, 0x45, 0xe1, 0xcb, 0xc2, 0x07, 0xf5, 0x61, 0x33, 0x10,
	0xb1, 0x50, 0x52, 0x9d, 0x71, 0x15, 0x5a, 0xc0, 0x05, 0x5e, 0x93, 0xfe, 0xc3, 0x6b, 0x07, 0xe8,
	0xe2, 0x62, 0xc6, 0x56, 0x41, 0xe4, 0xc1, 0xdf, 0xc6, 0xcf, 0x4f, 0xc6, 0xd7, 0x22, 0x53, 0x32,
	0x89, 0xad, 0x8a, 0x0b, 0xbc, 0x16, 0xdb, 0x94, 0xd1, 0x0e, 0x6c, 0x68, 0x19, 0x09, 0xa5, 0x79,
	0x94, 0x5a, 0xdf, 0x5d, 0xe0, 0x55, 0xd9, 0x52, 0x40, 0x36, 0xac, 0x2b, 0x91, 0xe5, 0xd2, 0x17,
	0xca, 0xaa, 0x9a, 0xe1, 0xe2, 0x8d, 0xf6, 0x60, 0xfb, 0x46, 0x2a, 0x3e, 0x1a, 0x0b, 0x26, 0xc6,
	0xfc, 0xf6, 0x6a, 0x66, 0xfd, 0x70, 0x81, 0x57, 0x67, 0x1b, 0x2a, 0x1a, 0x40, 0x68, 0x2e, 0x63,
	0x1a, 0x59, 0x35, 0x53, 0xc1, 0xde, 0xac, 0x70, 0xba, 0x20, 0xd8, 0x0a, 0x8d, 0x08, 0x6c, 0x4c,
	0x95, 0xc8, 0x8e, 0x03, 0x11, 0x6b, 0xeb, 0xa7, 0x0b, 0xbc, 0x5f, 0xc3, 0xbf, 0xaf, 0x4f, 0xbb,
	0x2d, 0xa5, 0xee, 0xf6, 0x23, 0x3e, 0x1b, 0x74, 0xe8, 0x61, 0xbf, 0xc3, 0x96, 0x0c, 0x3a, 0x82,
	0x8d, 0xc2, 0xb6, 0xcc, 0xaa, 0x9b, 0xac, 0xff, 0xeb, 0x59, 0x14, 0x9f, 0x7f, 0x02, 0x6c, 0xc9,
	0x0e, 0xff, 0x3c, 0xcc, 0x1d, 0xf0, 0x38, 0x77, 0xc0, 0xf3, 0xdc, 0x01, 0xf7, 0x2f, 0xce, 0xb7,
	0x51, 0xcd, 0x9c, 0xea, 0xe0, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x71, 0xd9, 0xa1, 0xa5, 0x02,
	0x00, 0x00,
}

func (m *ChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MeerState != nil {
		{
			size, err := m.MeerState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintChainstate(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GraphState != nil {
		{
			size, err := m.GraphState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DisableRelayTx {
		i--
		if m.DisableRelayTx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Services != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Services))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.ProtocolVersion != 0 {
		i = encodeVarintChainstate(dAtA, i, uint64(m.ProtocolVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.GenesisHash != nil {
		{
			size, err := m.GenesisHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainstate(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainstate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisHash != nil {
		l = m.GenesisHash.Size()
		n += 1 + l + sovChainstate(uint64(l))
	}
	if m.ProtocolVersion != 0 {
		n += 1 + sovChainstate(uint64(m.ProtocolVersion))
	}
	if m.Timestamp != 0 {
		n += 1 + sovChainstate(uint64(m.Timestamp))
	}
	if m.Services != 0 {
		n += 1 + sovChainstate(uint64(m.Services))
	}
	if m.DisableRelayTx {
		n += 2
	}
	if m.GraphState != nil {
		l = m.GraphState.Size()
		n += 1 + l + sovChainstate(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovChainstate(uint64(l))
	}
	if m.MeerState != nil {
		l = m.MeerState.Size()
		n += 1 + l + sovChainstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChainstate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainstate(x uint64) (n int) {
	return sovChainstate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisHash == nil {
				m.GenesisHash = &v1.Hash{}
			}
			if err := m.GenesisHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			m.Services = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Services |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRelayTx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRelayTx = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphState == nil {
				m.GraphState = &v1.GraphState{}
			}
			if err := m.GraphState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = append(m.UserAgent[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAgent == nil {
				m.UserAgent = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeerState == nil {
				m.MeerState = &MeerState{}
			}
			if err := m.MeerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainstate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainstate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainstate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainstate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainstate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainstate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainstate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainstate = fmt.Errorf("proto: unexpected end of group")
)

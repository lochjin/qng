// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Qitmeer/qng/p2p/proto/v2/meerevm.proto

package qitmeer_p2p_v2

import (
	fmt "fmt"
	v1 "github.com/Qitmeer/qng/p2p/proto/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MeerState struct {
	Id                   *v1.Hash `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number               uint64   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Enode                []byte   `protobuf:"bytes,3,opt,name=enode,proto3" json:"enode,omitempty" ssz-max:"256"`
	Enr                  []byte   `protobuf:"bytes,4,opt,name=enr,proto3" json:"enr,omitempty" ssz-max:"256"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeerState) Reset()         { *m = MeerState{} }
func (m *MeerState) String() string { return proto.CompactTextString(m) }
func (*MeerState) ProtoMessage()    {}
func (*MeerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d66759bb0db20d, []int{0}
}
func (m *MeerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeerState.Merge(m, src)
}
func (m *MeerState) XXX_Size() int {
	return m.Size()
}
func (m *MeerState) XXX_DiscardUnknown() {
	xxx_messageInfo_MeerState.DiscardUnknown(m)
}

var xxx_messageInfo_MeerState proto.InternalMessageInfo

func (m *MeerState) GetId() *v1.Hash {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MeerState) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MeerState) GetEnode() []byte {
	if m != nil {
		return m.Enode
	}
	return nil
}

func (m *MeerState) GetEnr() []byte {
	if m != nil {
		return m.Enr
	}
	return nil
}

func init() {
	proto.RegisterType((*MeerState)(nil), "qitmeer.p2p.v2.MeerState")
}

func init() {
	proto.RegisterFile("github.com/Qitmeer/qng/p2p/proto/v2/meerevm.proto", fileDescriptor_d3d66759bb0db20d)
}

var fileDescriptor_d3d66759bb0db20d = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xcc, 0x2c, 0xc9, 0x4d, 0x4d, 0x2d, 0xd2, 0x2f,
	0xcc, 0x4b, 0xd7, 0x2f, 0x30, 0x2a, 0xd0, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x33, 0xd2,
	0x07, 0x89, 0xa6, 0x96, 0xe5, 0xea, 0x81, 0x05, 0x84, 0xf8, 0x0a, 0x21, 0xea, 0xf4, 0x0a, 0x8c,
	0x0a, 0xf4, 0xca, 0x8c, 0xa4, 0xf4, 0x08, 0x1b, 0x61, 0xa8, 0x9f, 0x9e, 0x9f, 0x9e, 0x0f, 0xd1,
	0x2f, 0x65, 0x48, 0x8c, 0xfa, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x88, 0x16, 0xa5, 0xe9,
	0x8c, 0x5c, 0x9c, 0xbe, 0xa9, 0xa9, 0x45, 0xc1, 0x25, 0x89, 0x25, 0xa9, 0x42, 0x2a, 0x5c, 0x4c,
	0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x28, 0xae, 0x31, 0xd4, 0xf3,
	0x48, 0x2c, 0xce, 0x08, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe3, 0x62, 0xcb, 0x2b, 0xcd, 0x4d, 0x4a,
	0x2d, 0x92, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x82, 0xf2, 0x84, 0xd4, 0xb9, 0x58, 0x53, 0xf3,
	0xf2, 0x53, 0x52, 0x25, 0x98, 0x15, 0x18, 0x35, 0x78, 0x9c, 0x04, 0x3f, 0xdd, 0x93, 0xe7, 0x2d,
	0x2e, 0xae, 0xd2, 0xcd, 0x4d, 0xac, 0xb0, 0x52, 0x32, 0x32, 0x35, 0x53, 0x0a, 0x82, 0xc8, 0x0b,
	0x29, 0x73, 0x31, 0xa7, 0xe6, 0x15, 0x49, 0xb0, 0xe0, 0x52, 0x06, 0x92, 0x75, 0x12, 0x38, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48,
	0x62, 0x03, 0x3b, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x64, 0xc6, 0xf6, 0x5a, 0x01,
	0x00, 0x00,
}

func (m *MeerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Enr) > 0 {
		i -= len(m.Enr)
		copy(dAtA[i:], m.Enr)
		i = encodeVarintMeerevm(dAtA, i, uint64(len(m.Enr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Enode) > 0 {
		i -= len(m.Enode)
		copy(dAtA[i:], m.Enode)
		i = encodeVarintMeerevm(dAtA, i, uint64(len(m.Enode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintMeerevm(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeerevm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeerevm(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeerevm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MeerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovMeerevm(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovMeerevm(uint64(m.Number))
	}
	l = len(m.Enode)
	if l > 0 {
		n += 1 + l + sovMeerevm(uint64(l))
	}
	l = len(m.Enr)
	if l > 0 {
		n += 1 + l + sovMeerevm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMeerevm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeerevm(x uint64) (n int) {
	return sovMeerevm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeerevm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeerevm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeerevm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v1.Hash{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeerevm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeerevm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enode = append(m.Enode[:0], dAtA[iNdEx:postIndex]...)
			if m.Enode == nil {
				m.Enode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeerevm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeerevm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enr = append(m.Enr[:0], dAtA[iNdEx:postIndex]...)
			if m.Enr == nil {
				m.Enr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeerevm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeerevm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeerevm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeerevm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeerevm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeerevm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeerevm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMeerevm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMeerevm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMeerevm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeerevm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMeerevm = fmt.Errorf("proto: unexpected end of group")
)

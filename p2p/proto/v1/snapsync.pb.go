// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snapsync.proto

package qitmeer_p2p_v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Locator struct {
	Block                *Hash    `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	StateRoot            *Hash    `protobuf:"bytes,2,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Locator) Reset()         { *m = Locator{} }
func (m *Locator) String() string { return proto.CompactTextString(m) }
func (*Locator) ProtoMessage()    {}
func (*Locator) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c7ae889115bb49, []int{0}
}
func (m *Locator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locator.Merge(m, src)
}
func (m *Locator) XXX_Size() int {
	return m.Size()
}
func (m *Locator) XXX_DiscardUnknown() {
	xxx_messageInfo_Locator.DiscardUnknown(m)
}

var xxx_messageInfo_Locator proto.InternalMessageInfo

func (m *Locator) GetBlock() *Hash {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Locator) GetStateRoot() *Hash {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

type TransferData struct {
	Block                []byte   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty" ssz-max:"1048576"`
	Stxos                []byte   `protobuf:"bytes,2,opt,name=stxos,proto3" json:"stxos,omitempty" ssz-max:"1048576"`
	DagBlock             []byte   `protobuf:"bytes,3,opt,name=dagBlock,proto3" json:"dagBlock,omitempty" ssz-max:"1048576"`
	Main                 bool     `protobuf:"varint,4,opt,name=main,proto3" json:"main,omitempty"`
	TokenState           []byte   `protobuf:"bytes,5,opt,name=tokenState,proto3" json:"tokenState,omitempty" ssz-max:"1048576"`
	PrevTSHash           *Hash    `protobuf:"bytes,6,opt,name=prevTSHash,proto3" json:"prevTSHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferData) Reset()         { *m = TransferData{} }
func (m *TransferData) String() string { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()    {}
func (*TransferData) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c7ae889115bb49, []int{1}
}
func (m *TransferData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferData.Merge(m, src)
}
func (m *TransferData) XXX_Size() int {
	return m.Size()
}
func (m *TransferData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferData.DiscardUnknown(m)
}

var xxx_messageInfo_TransferData proto.InternalMessageInfo

func (m *TransferData) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *TransferData) GetStxos() []byte {
	if m != nil {
		return m.Stxos
	}
	return nil
}

func (m *TransferData) GetDagBlock() []byte {
	if m != nil {
		return m.DagBlock
	}
	return nil
}

func (m *TransferData) GetMain() bool {
	if m != nil {
		return m.Main
	}
	return false
}

func (m *TransferData) GetTokenState() []byte {
	if m != nil {
		return m.TokenState
	}
	return nil
}

func (m *TransferData) GetPrevTSHash() *Hash {
	if m != nil {
		return m.PrevTSHash
	}
	return nil
}

type SnapSyncReq struct {
	TargetBlock          *Hash      `protobuf:"bytes,1,opt,name=targetBlock,proto3" json:"targetBlock,omitempty"`
	StateRoot            *Hash      `protobuf:"bytes,2,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	Locator              []*Locator `protobuf:"bytes,3,rep,name=locator,proto3" json:"locator,omitempty" ssz-max:"32"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SnapSyncReq) Reset()         { *m = SnapSyncReq{} }
func (m *SnapSyncReq) String() string { return proto.CompactTextString(m) }
func (*SnapSyncReq) ProtoMessage()    {}
func (*SnapSyncReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c7ae889115bb49, []int{2}
}
func (m *SnapSyncReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapSyncReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapSyncReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapSyncReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapSyncReq.Merge(m, src)
}
func (m *SnapSyncReq) XXX_Size() int {
	return m.Size()
}
func (m *SnapSyncReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapSyncReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnapSyncReq proto.InternalMessageInfo

func (m *SnapSyncReq) GetTargetBlock() *Hash {
	if m != nil {
		return m.TargetBlock
	}
	return nil
}

func (m *SnapSyncReq) GetStateRoot() *Hash {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *SnapSyncReq) GetLocator() []*Locator {
	if m != nil {
		return m.Locator
	}
	return nil
}

type SnapSyncRsp struct {
	TargetBlock          *Hash           `protobuf:"bytes,1,opt,name=targetBlock,proto3" json:"targetBlock,omitempty"`
	StateRoot            *Hash           `protobuf:"bytes,2,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	Datas                []*TransferData `protobuf:"bytes,3,rep,name=datas,proto3" json:"datas,omitempty" ssz-max:"2000"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SnapSyncRsp) Reset()         { *m = SnapSyncRsp{} }
func (m *SnapSyncRsp) String() string { return proto.CompactTextString(m) }
func (*SnapSyncRsp) ProtoMessage()    {}
func (*SnapSyncRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c7ae889115bb49, []int{3}
}
func (m *SnapSyncRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapSyncRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapSyncRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapSyncRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapSyncRsp.Merge(m, src)
}
func (m *SnapSyncRsp) XXX_Size() int {
	return m.Size()
}
func (m *SnapSyncRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapSyncRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SnapSyncRsp proto.InternalMessageInfo

func (m *SnapSyncRsp) GetTargetBlock() *Hash {
	if m != nil {
		return m.TargetBlock
	}
	return nil
}

func (m *SnapSyncRsp) GetStateRoot() *Hash {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *SnapSyncRsp) GetDatas() []*TransferData {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterType((*Locator)(nil), "qitmeer.p2p.v1.Locator")
	proto.RegisterType((*TransferData)(nil), "qitmeer.p2p.v1.TransferData")
	proto.RegisterType((*SnapSyncReq)(nil), "qitmeer.p2p.v1.SnapSyncReq")
	proto.RegisterType((*SnapSyncRsp)(nil), "qitmeer.p2p.v1.SnapSyncRsp")
}

func init() { proto.RegisterFile("snapsync.proto", fileDescriptor_22c7ae889115bb49) }

var fileDescriptor_22c7ae889115bb49 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x8e, 0xd2, 0x50,
	0x14, 0xc6, 0xed, 0x30, 0x9d, 0x19, 0x4f, 0x91, 0x8c, 0x37, 0x1a, 0x9b, 0x89, 0x29, 0xe4, 0xae,
	0x88, 0x93, 0x29, 0xa5, 0xfc, 0xd1, 0xb8, 0xac, 0xc6, 0xb8, 0x70, 0xd5, 0xf2, 0x02, 0xb7, 0xe5,
	0x52, 0x1a, 0x68, 0x6f, 0xe9, 0xbd, 0x10, 0xf0, 0x49, 0x5c, 0xf8, 0x2c, 0x26, 0xee, 0x5c, 0xfa,
	0x04, 0xc4, 0xe0, 0x1b, 0xf0, 0x04, 0x86, 0x5b, 0xc0, 0x4a, 0x62, 0x4d, 0x5c, 0xcc, 0xee, 0x9e,
	0xe4, 0xf7, 0x9d, 0xaf, 0xdf, 0x39, 0xa7, 0x50, 0xe3, 0x09, 0x49, 0xf9, 0x2a, 0x09, 0xcc, 0x34,
	0x63, 0x82, 0xa1, 0xda, 0x2c, 0x12, 0x31, 0xa5, 0x99, 0x99, 0xda, 0xa9, 0xb9, 0x68, 0xdf, 0xdc,
	0x85, 0x91, 0x18, 0xcf, 0x7d, 0x33, 0x60, 0x71, 0x2b, 0x64, 0x21, 0x6b, 0x49, 0xcc, 0x9f, 0x8f,
	0x64, 0x25, 0x0b, 0xf9, 0xca, 0xe5, 0x37, 0x8f, 0x62, 0xca, 0x39, 0x09, 0x69, 0x5e, 0xe2, 0x08,
	0x2e, 0x3f, 0xb0, 0x80, 0x08, 0x96, 0xa1, 0x17, 0xa0, 0xfa, 0x53, 0x16, 0x4c, 0x74, 0xa5, 0xa1,
	0x34, 0x35, 0xfb, 0x89, 0xf9, 0xa7, 0x91, 0xf9, 0x9e, 0xf0, 0xb1, 0x9b, 0x23, 0xc8, 0x86, 0x87,
	0x5c, 0x10, 0x41, 0x5d, 0xc6, 0x84, 0x7e, 0x56, 0xc2, 0xff, 0xc6, 0xf0, 0xe7, 0x33, 0xa8, 0x0e,
	0x32, 0x92, 0xf0, 0x11, 0xcd, 0xde, 0x12, 0x41, 0xd0, 0x6d, 0xd1, 0xb0, 0xea, 0x3c, 0xdd, 0xae,
	0xeb, 0x8f, 0x39, 0xff, 0x78, 0x17, 0x93, 0xe5, 0x6b, 0xdc, 0xb6, 0xba, 0xaf, 0x7a, 0x2f, 0xfb,
	0xf8, 0xe0, 0x78, 0x0b, 0x2a, 0x17, 0x4b, 0xc6, 0xa5, 0xdb, 0xdf, 0x61, 0xc9, 0xa0, 0x36, 0x5c,
	0x0d, 0x49, 0xe8, 0xc8, 0xe6, 0x95, 0x32, 0xfe, 0x88, 0x21, 0x04, 0xe7, 0x31, 0x89, 0x12, 0xfd,
	0xbc, 0xa1, 0x34, 0xaf, 0x5c, 0xf9, 0x46, 0x3d, 0x00, 0xc1, 0x26, 0x34, 0xf1, 0x76, 0x19, 0x74,
	0xb5, 0xac, 0x51, 0x01, 0x44, 0x5d, 0x80, 0x34, 0xa3, 0x8b, 0x81, 0xb7, 0x9b, 0x80, 0x7e, 0x51,
	0x32, 0x9d, 0x02, 0x87, 0xbf, 0x28, 0xa0, 0x79, 0x09, 0x49, 0xbd, 0x55, 0x12, 0xb8, 0x74, 0x86,
	0xfa, 0xa0, 0x09, 0x92, 0x85, 0x54, 0x38, 0xff, 0x5c, 0x4a, 0x11, 0xfc, 0x9f, 0xd5, 0xa0, 0x37,
	0x70, 0x39, 0xcd, 0xaf, 0x40, 0xaf, 0x34, 0x2a, 0x4d, 0xcd, 0x7e, 0x76, 0xaa, 0xd8, 0x1f, 0x89,
	0x73, 0xbd, 0x5d, 0xd7, 0xab, 0xc7, 0xf8, 0x1d, 0x1b, 0xbb, 0x07, 0x25, 0xfe, 0x5a, 0x0c, 0xc0,
	0xd3, 0x7b, 0x0d, 0xf0, 0x0e, 0xd4, 0x21, 0x11, 0x84, 0xef, 0x3f, 0xff, 0xf9, 0x29, 0x5f, 0xbc,
	0x3b, 0x07, 0x6d, 0xd7, 0xf5, 0xda, 0x31, 0x83, 0x6d, 0x59, 0x16, 0x76, 0x73, 0xb9, 0x73, 0xfd,
	0x6d, 0x63, 0x28, 0xdf, 0x37, 0x86, 0xf2, 0x63, 0x63, 0x28, 0x9f, 0x7e, 0x1a, 0x0f, 0xfc, 0x0b,
	0xf9, 0x9f, 0x74, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x26, 0x2a, 0xcb, 0x87, 0x03, 0x00,
	0x00,
}

func (m *Locator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StateRoot != nil {
		{
			size, err := m.StateRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrevTSHash != nil {
		{
			size, err := m.PrevTSHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenState) > 0 {
		i -= len(m.TokenState)
		copy(dAtA[i:], m.TokenState)
		i = encodeVarintSnapsync(dAtA, i, uint64(len(m.TokenState)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Main {
		i--
		if m.Main {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.DagBlock) > 0 {
		i -= len(m.DagBlock)
		copy(dAtA[i:], m.DagBlock)
		i = encodeVarintSnapsync(dAtA, i, uint64(len(m.DagBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Stxos) > 0 {
		i -= len(m.Stxos)
		copy(dAtA[i:], m.Stxos)
		i = encodeVarintSnapsync(dAtA, i, uint64(len(m.Stxos)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintSnapsync(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapSyncReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapSyncReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapSyncReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locator) > 0 {
		for iNdEx := len(m.Locator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnapsync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StateRoot != nil {
		{
			size, err := m.StateRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TargetBlock != nil {
		{
			size, err := m.TargetBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapSyncRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapSyncRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapSyncRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnapsync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StateRoot != nil {
		{
			size, err := m.StateRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TargetBlock != nil {
		{
			size, err := m.TargetBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapsync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnapsync(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapsync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Locator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.StateRoot != nil {
		l = m.StateRoot.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovSnapsync(uint64(l))
	}
	l = len(m.Stxos)
	if l > 0 {
		n += 1 + l + sovSnapsync(uint64(l))
	}
	l = len(m.DagBlock)
	if l > 0 {
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.Main {
		n += 2
	}
	l = len(m.TokenState)
	if l > 0 {
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.PrevTSHash != nil {
		l = m.PrevTSHash.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapSyncReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetBlock != nil {
		l = m.TargetBlock.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.StateRoot != nil {
		l = m.StateRoot.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if len(m.Locator) > 0 {
		for _, e := range m.Locator {
			l = e.Size()
			n += 1 + l + sovSnapsync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapSyncRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetBlock != nil {
		l = m.TargetBlock.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if m.StateRoot != nil {
		l = m.StateRoot.Size()
		n += 1 + l + sovSnapsync(uint64(l))
	}
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSnapsync(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSnapsync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapsync(x uint64) (n int) {
	return sovSnapsync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Locator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Hash{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateRoot == nil {
				m.StateRoot = &Hash{}
			}
			if err := m.StateRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stxos", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stxos = append(m.Stxos[:0], dAtA[iNdEx:postIndex]...)
			if m.Stxos == nil {
				m.Stxos = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DagBlock", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DagBlock = append(m.DagBlock[:0], dAtA[iNdEx:postIndex]...)
			if m.DagBlock == nil {
				m.DagBlock = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Main = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenState = append(m.TokenState[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenState == nil {
				m.TokenState = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTSHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevTSHash == nil {
				m.PrevTSHash = &Hash{}
			}
			if err := m.PrevTSHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapSyncReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapSyncReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapSyncReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetBlock == nil {
				m.TargetBlock = &Hash{}
			}
			if err := m.TargetBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateRoot == nil {
				m.StateRoot = &Hash{}
			}
			if err := m.StateRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locator = append(m.Locator, &Locator{})
			if err := m.Locator[len(m.Locator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapSyncRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapSyncRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapSyncRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetBlock == nil {
				m.TargetBlock = &Hash{}
			}
			if err := m.TargetBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateRoot == nil {
				m.StateRoot = &Hash{}
			}
			if err := m.StateRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapsync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapsync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &TransferData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapsync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapsync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapsync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnapsync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnapsync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnapsync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapsync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnapsync = fmt.Errorf("proto: unexpected end of group")
)

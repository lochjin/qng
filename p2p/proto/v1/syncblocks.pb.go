// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Qitmeer/qng/p2p/proto/v1/syncblocks.proto

package qitmeer_p2p_v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SyncBlocksReq struct {
	Init                 bool        `protobuf:"varint,1,opt,name=init,proto3" json:"init,omitempty"`
	GraphState           *GraphState `protobuf:"bytes,2,opt,name=graphState,proto3" json:"graphState,omitempty"`
	MainLocator          []*Hash     `protobuf:"bytes,3,rep,name=mainLocator,proto3" json:"mainLocator,omitempty" ssz-max:"32"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SyncBlocksReq) Reset()         { *m = SyncBlocksReq{} }
func (m *SyncBlocksReq) String() string { return proto.CompactTextString(m) }
func (*SyncBlocksReq) ProtoMessage()    {}
func (*SyncBlocksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d6f3f80c14e2bdb, []int{0}
}
func (m *SyncBlocksReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncBlocksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncBlocksReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncBlocksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncBlocksReq.Merge(m, src)
}
func (m *SyncBlocksReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncBlocksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncBlocksReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncBlocksReq proto.InternalMessageInfo

func (m *SyncBlocksReq) GetInit() bool {
	if m != nil {
		return m.Init
	}
	return false
}

func (m *SyncBlocksReq) GetGraphState() *GraphState {
	if m != nil {
		return m.GraphState
	}
	return nil
}

func (m *SyncBlocksReq) GetMainLocator() []*Hash {
	if m != nil {
		return m.MainLocator
	}
	return nil
}

type SyncBlocksRsp struct {
	Complete             bool         `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	SyncPoint            *Hash        `protobuf:"bytes,2,opt,name=syncPoint,proto3" json:"syncPoint,omitempty"`
	Blocks               []*BytesData `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty" ssz-max:"1048576"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SyncBlocksRsp) Reset()         { *m = SyncBlocksRsp{} }
func (m *SyncBlocksRsp) String() string { return proto.CompactTextString(m) }
func (*SyncBlocksRsp) ProtoMessage()    {}
func (*SyncBlocksRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d6f3f80c14e2bdb, []int{1}
}
func (m *SyncBlocksRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncBlocksRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncBlocksRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncBlocksRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncBlocksRsp.Merge(m, src)
}
func (m *SyncBlocksRsp) XXX_Size() int {
	return m.Size()
}
func (m *SyncBlocksRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncBlocksRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncBlocksRsp proto.InternalMessageInfo

func (m *SyncBlocksRsp) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *SyncBlocksRsp) GetSyncPoint() *Hash {
	if m != nil {
		return m.SyncPoint
	}
	return nil
}

func (m *SyncBlocksRsp) GetBlocks() []*BytesData {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncBlocksReq)(nil), "qitmeer.p2p.v1.SyncBlocksReq")
	proto.RegisterType((*SyncBlocksRsp)(nil), "qitmeer.p2p.v1.SyncBlocksRsp")
}

func init() {
	proto.RegisterFile("github.com/Qitmeer/qng/p2p/proto/v1/syncblocks.proto", fileDescriptor_8d6f3f80c14e2bdb)
}

var fileDescriptor_8d6f3f80c14e2bdb = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4e, 0xc2, 0x30,
	0x1c, 0x80, 0xad, 0x18, 0x82, 0x45, 0x0d, 0x36, 0x9a, 0xe0, 0x0e, 0x83, 0xec, 0xc4, 0xc5, 0xce,
	0x0d, 0xfc, 0x13, 0x8e, 0x8b, 0x89, 0x1c, 0x3c, 0xe8, 0x78, 0x82, 0xb2, 0x34, 0xa3, 0x91, 0xfe,
	0x61, 0xad, 0x44, 0x7c, 0x12, 0x5f, 0xc1, 0x37, 0xf1, 0xe8, 0x13, 0x10, 0x83, 0x6f, 0xc0, 0x13,
	0x18, 0x46, 0x83, 0x48, 0x3c, 0xec, 0xb6, 0x35, 0xdf, 0xd7, 0x7e, 0xed, 0x0f, 0x76, 0x52, 0x66,
	0x86, 0xcf, 0x03, 0x9c, 0x48, 0xee, 0x3f, 0x32, 0xc3, 0x29, 0xcd, 0xfc, 0xb1, 0x48, 0x7d, 0x15,
	0x2a, 0x5f, 0x65, 0xd2, 0x48, 0x7f, 0x12, 0xf8, 0x7a, 0x2a, 0x92, 0xc1, 0x48, 0x26, 0x4f, 0x1a,
	0xe7, 0x6b, 0xe8, 0x68, 0xbc, 0x42, 0xb1, 0x0a, 0x15, 0x9e, 0x04, 0x0e, 0x2e, 0xb2, 0x4b, 0x2a,
	0x53, 0xb9, 0xf2, 0x9d, 0xa0, 0x08, 0xcf, 0xa9, 0xd6, 0x24, 0xa5, 0x56, 0x29, 0x14, 0x9a, 0x66,
	0x44, 0x0d, 0xb5, 0x21, 0xc6, 0x5a, 0xde, 0x3b, 0x80, 0x87, 0xfd, 0xa9, 0x48, 0xa2, 0xbc, 0x3e,
	0xa6, 0x63, 0x84, 0xe0, 0x1e, 0x13, 0xcc, 0xd4, 0x41, 0x13, 0xb4, 0x2a, 0x71, 0xfe, 0x8d, 0xba,
	0x10, 0xe6, 0x66, 0x7f, 0x69, 0xd6, 0x77, 0x9b, 0xa0, 0x55, 0x0d, 0x1d, 0xfc, 0xf7, 0x8e, 0xf8,
	0x6e, 0x4d, 0xc4, 0x1b, 0x34, 0xea, 0xc1, 0x2a, 0x27, 0x4c, 0xdc, 0xcb, 0x84, 0x18, 0x99, 0xd5,
	0x4b, 0xcd, 0x52, 0xab, 0x1a, 0x9e, 0x6c, 0xcb, 0x3d, 0xa2, 0x87, 0x51, 0x6d, 0x31, 0x6b, 0x1c,
	0x68, 0xfd, 0x7a, 0xce, 0xc9, 0x4b, 0xd7, 0x6b, 0x87, 0x5e, 0xbc, 0xa9, 0x6e, 0xb7, 0x6a, 0x85,
	0x1c, 0x58, 0x49, 0x24, 0x57, 0x23, 0x6a, 0xa8, 0xed, 0x5d, 0xff, 0xa3, 0x10, 0xee, 0x2f, 0xc7,
	0xf2, 0x20, 0x99, 0x30, 0x36, 0xf9, 0xdf, 0x53, 0xe3, 0x5f, 0x0c, 0xf5, 0x60, 0x79, 0x35, 0x46,
	0x9b, 0x79, 0xb6, 0x2d, 0x44, 0x53, 0x43, 0xf5, 0x2d, 0x31, 0x24, 0x3a, 0x5d, 0xcc, 0x1a, 0xc7,
	0xeb, 0xd6, 0xe0, 0xa2, 0x73, 0x73, 0x79, 0x7d, 0xe5, 0xc5, 0xd6, 0x8f, 0x6a, 0x1f, 0x73, 0x17,
	0x7c, 0xce, 0x5d, 0xf0, 0x35, 0x77, 0xc1, 0xdb, 0xb7, 0xbb, 0x33, 0x28, 0xe7, 0x0f, 0xde, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x23, 0x58, 0x4e, 0x18, 0x51, 0x02, 0x00, 0x00,
}

func (m *SyncBlocksReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncBlocksReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncBlocksReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MainLocator) > 0 {
		for iNdEx := len(m.MainLocator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MainLocator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSyncblocks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GraphState != nil {
		{
			size, err := m.GraphState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSyncblocks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Init {
		i--
		if m.Init {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncBlocksRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncBlocksRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncBlocksRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSyncblocks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SyncPoint != nil {
		{
			size, err := m.SyncPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSyncblocks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Complete {
		i--
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSyncblocks(dAtA []byte, offset int, v uint64) int {
	offset -= sovSyncblocks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncBlocksReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Init {
		n += 2
	}
	if m.GraphState != nil {
		l = m.GraphState.Size()
		n += 1 + l + sovSyncblocks(uint64(l))
	}
	if len(m.MainLocator) > 0 {
		for _, e := range m.MainLocator {
			l = e.Size()
			n += 1 + l + sovSyncblocks(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncBlocksRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Complete {
		n += 2
	}
	if m.SyncPoint != nil {
		l = m.SyncPoint.Size()
		n += 1 + l + sovSyncblocks(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovSyncblocks(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyncblocks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSyncblocks(x uint64) (n int) {
	return sovSyncblocks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncBlocksReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncblocks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncBlocksReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncBlocksReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Init", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Init = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphState == nil {
				m.GraphState = &GraphState{}
			}
			if err := m.GraphState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainLocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainLocator = append(m.MainLocator, &Hash{})
			if err := m.MainLocator[len(m.MainLocator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncblocks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncBlocksRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncblocks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncBlocksRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncBlocksRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncPoint == nil {
				m.SyncPoint = &Hash{}
			}
			if err := m.SyncPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncblocks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BytesData{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncblocks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncblocks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyncblocks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyncblocks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncblocks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSyncblocks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSyncblocks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSyncblocks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSyncblocks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyncblocks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSyncblocks = fmt.Errorf("proto: unexpected end of group")
)
